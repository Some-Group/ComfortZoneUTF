import serial
from serial.serialutil import SerialException
import pandas as pd
import re
from datetime import datetime
import time

try:
    ser = serial.Serial('COM9', 115200)
    ser.flush()
except SerialException:
    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï COM9")
    exit()

data = []

try:
    while True:
        try:
            if ser.in_waiting > 0:
                try:
                    line = ser.readline().decode('utf-8').strip()
                except UnicodeDecodeError:
                    continue

                # pattern ‡πÉ‡∏´‡∏°‡πà: R[...] IR[...] G[...]
                match = re.search(r'R\[(\d+)\]\s+IR\[(\d+)\]\s+G\[(\d+)\]', line)
                if match:
                    r_val = int(match.group(1))
                    ir_val = int(match.group(2))
                    g_val = int(match.group(3))

                    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]  # ‡∏°‡∏µ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

                    data.append([timestamp, r_val, ir_val, g_val])
                    print(f"{timestamp} - R: {r_val}, IR: {ir_val}, G: {g_val}")
            else:
                time.sleep(0.01)

        except SerialException:
            print("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Serial ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î")
            break

except KeyboardInterrupt:
    print("\n‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

finally:
    ser.close()

    df = pd.DataFrame(data, columns=['Timestamp', 'R', 'IR', 'G'])
    filename = f"sensor_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    df.to_csv(filename, index=False)
    print(f"\n‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {filename}")


# import os
# import csv
# import time
# import requests
# import sseclient
# from datetime import datetime

# # IP ‡∏Ç‡∏≠‡∏á ESP32
# ESP32_IP = "192.168.0.42"
# SSE_URL = f"http://{ESP32_IP}/sse"

# # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö CSV
# SAVE_PATH = r'D:/1-BukAILab/01-MAX30102/csv'
# if not os.path.exists(SAVE_PATH):
#     os.makedirs(SAVE_PATH)
#     print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {SAVE_PATH} ‡πÅ‡∏•‡πâ‡∏ß")

# def generate_filename():
#     current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
#     return os.path.join(SAVE_PATH, f"max30102_data_{current_time}.csv")

# def start_logging():
#     filename = generate_filename()
#     print(f"üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡∏ó‡∏µ‡πà {ESP32_IP}...")
#     print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà: {filename}")

#     try:
#         # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SSE
#         response = requests.get(SSE_URL, stream=True)
#         client = sseclient.SSEClient(response)

#         with open(filename, 'w', newline='') as csvfile:
#             writer = csv.writer(csvfile)
#             writer.writerow(['Timestamp', 'IR', 'Red', 'DateTime'])

#             start_time = time.time()
#             record_count = 0

#             for event in client.events():
#                 if event.data:
#                     data = event.data.strip()
#                     values = data.split(',')

#                     if len(values) >= 3:
#                         timestamp, ir, red = values[:3]
#                         now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
#                         writer.writerow([timestamp, ir, red, now_str])
#                         csvfile.flush()

#                         record_count += 1
#                         if record_count % 100 == 0:
#                             elapsed = time.time() - start_time
#                             rate = record_count / elapsed
#                             print(f"üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {record_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ({rate:.1f} records/sec)")

#     except KeyboardInterrupt:
#         print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
#     except requests.exceptions.ConnectionError:
#         print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡πÑ‡∏î‡πâ")
#     except Exception as e:
#         print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
#     finally:
#         print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à: {filename}")

# if __name__ == "__main__":
#     print("üì• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå MAX30102 (ESP32)")
#     print("üîå ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n")
#     start_logging()


# import os
# import csv
# import time
# import requests
# import sseclient
# from datetime import datetime

# # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP ‡∏Ç‡∏≠‡∏á ESP32 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå MAX30102
# ESP32_IP = "192.168.0.42"
# SSE_URL = f"http://{ESP32_IP}/sse"

# # ‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
# SAVE_PATH = r'D:/1-BukAILab/01-MAX30102/csv'

# # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
# if not os.path.exists(SAVE_PATH):
#     os.makedirs(SAVE_PATH)
#     print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {SAVE_PATH} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# def generate_filename():
#     """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
#     current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
#     return os.path.join(SAVE_PATH, f"max30102_data_{current_time}.csv")

# def start_logging():
#     """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSE stream"""
#     filename = generate_filename()
    
#     print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡∏ó‡∏µ‡πà {ESP32_IP}...")
#     print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {filename}")
    
#     try:
#         # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         with open(filename, 'w', newline='') as csvfile:
#             csv_writer = csv.writer(csvfile)
            
#             # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
#             csv_writer.writerow(['Timestamp', 'IR', 'Red', 'DateTime'])
            
#             # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SSE stream
#             response = requests.get(SSE_URL, stream=True)
            
#             start_time = time.time()
#             record_count = 0
            
#             for line in response.iter_lines():
#                 if line:
#                     # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SSE (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ data:)
#                     if not line.startswith(b'data:'):
#                         continue
                        
#                     # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSE format
#                     data_str = line.decode('utf-8').replace('data:', '').strip()
                    
#                     # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (timestamp, ir, red)
#                     values = data_str.split(',')
                    
#                     # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 3 ‡∏Ñ‡πà‡∏≤
#                     if len(values) == 3:
#                         timestamp, ir, red = values[0], values[1], values[2]
#                         current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                        
#                         # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
#                         csv_writer.writerow([timestamp, ir, red, current_datetime])
#                         csvfile.flush()  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏î‡∏¥‡∏™‡∏Å‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        
#                         record_count += 1
                        
#                         # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÜ 25 records (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
#                         if record_count % 25 == 0:
#                             elapsed = time.time() - start_time
#                             rate = record_count / elapsed if elapsed > 0 else 0
#                             print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß {record_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ({rate:.1f} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
    
#     except KeyboardInterrupt:
#         print("\n‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
#     except requests.exceptions.ConnectionError:
#         print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡∏ó‡∏µ‡πà IP: {ESP32_IP}")
#         print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:")
#         print("1. ESP32 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
#         print("2. ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ESP32")
#         print("3. IP ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
#     except Exception as e:
#         print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
#     finally:
#         print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

# if __name__ == "__main__":
#     print("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå MAX30102")
#     print("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
#     start_logging()


# import os
# import csv
# import time
# import requests
# from datetime import datetime

# # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP ‡∏Ç‡∏≠‡∏á ESP32 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå MAX30102
# ESP32_IP = "192.168.0.42"
# SSE_URL = f"http://{ESP32_IP}/sse"

# # ‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
# SAVE_PATH = r'D:/1-BukAILab/01-MAX30102/csv'

# # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
# if not os.path.exists(SAVE_PATH):
#     os.makedirs(SAVE_PATH)
#     print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {SAVE_PATH} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# def generate_filename():
#     """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
#     current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
#     return os.path.join(SAVE_PATH, f"max30102_data_{current_time}.csv")

# def start_logging():
#     """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSE stream"""
#     filename = generate_filename()
    
#     print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡∏ó‡∏µ‡πà {ESP32_IP}...")
#     print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {filename}")
    
#     try:
#         # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         with open(filename, 'w', newline='') as csvfile:
#             csv_writer = csv.writer(csvfile)
            
#             # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
#             csv_writer.writerow(['Timestamp', 'IR', 'Red', 'Green', 'DateTime'])
            
#             # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SSE stream
#             response = requests.get(SSE_URL, stream=True)
            
#             start_time = time.time()
#             record_count = 0
            
#             for line in response.iter_lines():
#                 if line:
#                     # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#                     if not line.startswith(b'data:'):
#                         continue
                        
#                     # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSE format
#                     data_str = line.decode('utf-8').replace('data:', '').strip()
                    
#                     # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (timestamp,ir,red,green)
#                     values = data_str.split(',')
                    
#                     if len(values) >= 4:
#                         timestamp, ir, red, green = values[0], values[1], values[2], values[3]
#                         current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                        
#                         # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
#                         csv_writer.writerow([timestamp, ir, red, green, current_datetime])
#                         csvfile.flush()  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏î‡∏¥‡∏™‡∏Å‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        
#                         record_count += 1
                        
#                         # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÜ 25 records (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
#                         if record_count % 25 == 0:
#                             elapsed = time.time() - start_time
#                             rate = record_count / elapsed if elapsed > 0 else 0
#                             print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß {record_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ({rate:.1f} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
    
#     except KeyboardInterrupt:
#         print("\n‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
#     except requests.exceptions.ConnectionError:
#         print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32 ‡∏ó‡∏µ‡πà IP: {ESP32_IP}")
#         print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:")
#         print("1. ESP32 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
#         print("2. ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ESP32")
#         print("3. IP ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
#     except Exception as e:
#         print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
#     finally:
#         print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

# if __name__ == "__main__":
#     print("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå MAX30102")
#     print("‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
#     start_logging()


# from flask import Flask, request
# import csv
# import os
# import logging
# from datetime import datetime
# import threading
# import time

# app = Flask(__name__)

# # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
# base_path = 'D:/1-BukAILab/01-MAX30102/csv'
# os.makedirs(base_path, exist_ok=True)

# # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
# start_time = datetime.now()
# filename = start_time.strftime('%Y-%m-%d_%H-%M-%S') + '.csv'
# file_path = os.path.join(base_path, filename)

# # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö logging ‡πÑ‡∏ü‡∏•‡πå error log
# log_folder = os.path.join(base_path, 'error_log')
# os.makedirs(log_folder, exist_ok=True)
# log_file = os.path.join(log_folder, 'error_log.txt')

# logging.basicConfig(
#     level=logging.ERROR,
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.FileHandler(log_file, encoding='utf-8'),
#         logging.StreamHandler()
#     ]
# )

# # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
# def create_csv():
#     try:
#         with open(file_path, 'w', newline='') as f:
#             writer = csv.writer(f)
#             writer.writerow(['ReceiveTimestamp', 'SensorTimestamp', 'IR', 'RED', 'GREEN'])
#         logging.info(f"CSV file created: {file_path}")
#     except Exception as e:
#         logging.error(f"Failed to create CSV file: {e}")

# create_csv()

# lock = threading.Lock()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

# @app.route('/data', methods=['POST'])
# def receive_data():
#     try:
#         sensor_ts = request.form.get('timestamp', '')
#         ir = request.form.get('ir', '')
#         red = request.form.get('red', '')
#         green = request.form.get('green', '')

#         # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà server ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#         receive_ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]

#         # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° validation)
#         if not (sensor_ts and ir and red and green):
#             logging.error(f"Incomplete data received: {request.form}")
#             return 'Incomplete data', 400

#         # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV ‡∏î‡πâ‡∏ß‡∏¢ lock ‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
#         with lock:
#             with open(file_path, 'a', newline='') as f:
#                 writer = csv.writer(f)
#                 writer.writerow([receive_ts, sensor_ts, ir, red, green])

#         print(f"[{receive_ts}] Received: ts={sensor_ts}, IR={ir}, RED={red}, GREEN={green}")
#         return 'OK', 200

#     except Exception as e:
#         logging.error(f"Error in /data endpoint: {e}")
#         return 'Internal Server Error', 500

# def run_flask():
#     app.run(host='192.168.0.42', port=80)

# if __name__ == '__main__':
#     try:
#         run_flask()
#     except Exception as e:
#         logging.error(f"Flask app crashed: {e}")
